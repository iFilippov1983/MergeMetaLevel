//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ChipsEntity {

    public DoMoveComponent doMove { get { return (DoMoveComponent)GetComponent(ChipsComponentsLookup.DoMove); } }
    public bool hasDoMove { get { return HasComponent(ChipsComponentsLookup.DoMove); } }

    public void AddDoMove(int newX, int newY, float newSpeed, DG.Tweening.Ease newEasing) {
        var index = ChipsComponentsLookup.DoMove;
        var component = (DoMoveComponent)CreateComponent(index, typeof(DoMoveComponent));
        component.x = newX;
        component.y = newY;
        component.speed = newSpeed;
        component.Easing = newEasing;
        AddComponent(index, component);
    }

    public void ReplaceDoMove(int newX, int newY, float newSpeed, DG.Tweening.Ease newEasing) {
        var index = ChipsComponentsLookup.DoMove;
        var component = (DoMoveComponent)CreateComponent(index, typeof(DoMoveComponent));
        component.x = newX;
        component.y = newY;
        component.speed = newSpeed;
        component.Easing = newEasing;
        ReplaceComponent(index, component);
    }

    public void RemoveDoMove() {
        RemoveComponent(ChipsComponentsLookup.DoMove);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ChipsMatcher {

    static Entitas.IMatcher<ChipsEntity> _matcherDoMove;

    public static Entitas.IMatcher<ChipsEntity> DoMove {
        get {
            if (_matcherDoMove == null) {
                var matcher = (Entitas.Matcher<ChipsEntity>)Entitas.Matcher<ChipsEntity>.AllOf(ChipsComponentsLookup.DoMove);
                matcher.componentNames = ChipsComponentsLookup.componentNames;
                _matcherDoMove = matcher;
            }

            return _matcherDoMove;
        }
    }
}
